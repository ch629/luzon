package com.luzon.recursive_descent.expression

import com.luzon.recursive_descent.ast.SyntaxTreeNode

interface ASTNodeVisitor<T> {
    fun visit(node: SyntaxTreeNode.Class): T = throw NotImplementedError("ASTNode.Class visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Constructor): T = throw NotImplementedError("ASTNode.Constructor visitor not implemented.")
    fun visit(node: SyntaxTreeNode.ConstructorVariableDeclaration): T = throw NotImplementedError("ASTNode.ConstructorVariableDeclaration visitor not implemented.")
    fun visit(node: SyntaxTreeNode.FunctionDefinition): T = throw NotImplementedError("ASTNode.FunctionDefinition visitor not implemented.")
    fun visit(node: SyntaxTreeNode.FunctionParameter): T = throw NotImplementedError("ASTNode.FunctionParameter visitor not implemented.")
    fun visit(node: SyntaxTreeNode.ForLoop): T = throw NotImplementedError("ASTNode.ForLoop visitor not implemented.")
    fun visit(node: SyntaxTreeNode.WhileLoop): T = throw NotImplementedError("ASTNode.WhileLoop visitor not implemented.")
    fun visit(node: SyntaxTreeNode.IfStatement): T = throw NotImplementedError("ASTNode.IfStatement visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Return): T = throw NotImplementedError("ASTNode.Return visitor not implemented.")
    fun visit(node: SyntaxTreeNode.ElseStatements.ElseIfStatement): T = throw NotImplementedError("ASTNode.ElseStatements.ElseIfStatement visitor not implemented.")
    fun visit(node: SyntaxTreeNode.ElseStatements.ElseStatement): T = throw NotImplementedError("ASTNode.ElseStatements.ElseStatement visitor not implemented.")
    fun visit(node: SyntaxTreeNode.VariableDeclaration): T = throw NotImplementedError("ASTNode.VariableDeclaration visitor not implemented.")
    fun visit(node: SyntaxTreeNode.VariableAssign): T = throw NotImplementedError("ASTNode.VariableAssign visitor not implemented.")
    fun visit(node: SyntaxTreeNode.OperatorVariableAssign): T = throw NotImplementedError("ASTNode.OperatorVariableAssign visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Block): T = throw NotImplementedError("ASTNode.Block visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.Plus): T = throw NotImplementedError("ASTNode.Expression.Binary.Plus visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.Subtract): T = throw NotImplementedError("ASTNode.Expression.Binary.Sub visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.Multiply): T = throw NotImplementedError("ASTNode.Expression.Binary.Mult visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.Divide): T = throw NotImplementedError("ASTNode.Expression.Binary.Div visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.Modulus): T = throw NotImplementedError("ASTNode.Expression.Binary.Mod visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.Equals): T = throw NotImplementedError("ASTNode.Expression.Binary.Equals visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.NotEquals): T = throw NotImplementedError("ASTNode.Expression.Binary.NotEquals visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.GreaterEquals): T = throw NotImplementedError("ASTNode.Expression.Binary.GreaterEquals visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.Greater): T = throw NotImplementedError("ASTNode.Expression.Binary.Greater visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.Less): T = throw NotImplementedError("ASTNode.Expression.Binary.Less visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.LessEquals): T = throw NotImplementedError("ASTNode.Expression.Binary.LessEquals visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.And): T = throw NotImplementedError("ASTNode.Expression.Binary.And visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Binary.Or): T = throw NotImplementedError("ASTNode.Expression.Binary.Or visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Unary.Minus): T = throw NotImplementedError("ASTNode.Expression.Unary.Sub visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Unary.Not): T = throw NotImplementedError("ASTNode.Expression.Unary.Not visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Unary.Increment): T = throw NotImplementedError("ASTNode.Expression.Unary.Increment visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.Unary.Decrement): T = throw NotImplementedError("ASTNode.Expression.Unary.Decrement visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.LiteralExpr.IntLiteral): T = throw NotImplementedError("ASTNode.Expression.LiteralExpr.IntLiteral visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.LiteralExpr.FloatLiteral): T = throw NotImplementedError("ASTNode.Expression.LiteralExpr.FloatLiteral visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.LiteralExpr.DoubleLiteral): T = throw NotImplementedError("ASTNode.Expression.LiteralExpr.DoubleLiteral visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.LiteralExpr.IdentifierLiteral): T = throw NotImplementedError("ASTNode.Expression.LiteralExpr.IdentifierLiteral visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.LiteralExpr.BooleanLiteral): T = throw NotImplementedError("ASTNode.Expression.LiteralExpr.BooleanLiteral visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.LiteralExpr.StringLiteral): T = throw NotImplementedError("ASTNode.Expression.LiteralExpr.StringLiteral visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.LiteralExpr.FunctionCall): T = throw NotImplementedError("ASTNode.Expression.LiteralExpr.FunctionCall visitor not implemented.")
    fun visit(node: SyntaxTreeNode.Expression.LiteralExpr.DotChainLiteral): T = throw NotImplementedError("ASTNode.Expression.LiteralExpr.DotChainLiteral visitor not implemented.")
}

fun <T> SyntaxTreeNode.accept(visitor: ASTNodeVisitor<T>) = when (this) {
    is SyntaxTreeNode.Class -> visitor.visit(this)
    is SyntaxTreeNode.Constructor -> visitor.visit(this)
    is SyntaxTreeNode.ConstructorVariableDeclaration -> visitor.visit(this)
    is SyntaxTreeNode.FunctionDefinition -> visitor.visit(this)
    is SyntaxTreeNode.FunctionParameter -> visitor.visit(this)
    is SyntaxTreeNode.ForLoop -> visitor.visit(this)
    is SyntaxTreeNode.WhileLoop -> visitor.visit(this)
    is SyntaxTreeNode.IfStatement -> visitor.visit(this)
    is SyntaxTreeNode.Return -> visitor.visit(this)
    is SyntaxTreeNode.ElseStatements.ElseIfStatement -> visitor.visit(this)
    is SyntaxTreeNode.ElseStatements.ElseStatement -> visitor.visit(this)
    is SyntaxTreeNode.VariableDeclaration -> visitor.visit(this)
    is SyntaxTreeNode.VariableAssign -> visitor.visit(this)
    is SyntaxTreeNode.OperatorVariableAssign -> visitor.visit(this)
    is SyntaxTreeNode.Block -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.Plus -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.Subtract -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.Multiply -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.Divide -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.Modulus -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.Equals -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.NotEquals -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.GreaterEquals -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.Greater -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.Less -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.LessEquals -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.And -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Binary.Or -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Unary.Minus -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Unary.Not -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Unary.Increment -> visitor.visit(this)
    is SyntaxTreeNode.Expression.Unary.Decrement -> visitor.visit(this)
    is SyntaxTreeNode.Expression.LiteralExpr.IntLiteral -> visitor.visit(this)
    is SyntaxTreeNode.Expression.LiteralExpr.FloatLiteral -> visitor.visit(this)
    is SyntaxTreeNode.Expression.LiteralExpr.DoubleLiteral -> visitor.visit(this)
    is SyntaxTreeNode.Expression.LiteralExpr.IdentifierLiteral -> visitor.visit(this)
    is SyntaxTreeNode.Expression.LiteralExpr.BooleanLiteral -> visitor.visit(this)
    is SyntaxTreeNode.Expression.LiteralExpr.StringLiteral -> visitor.visit(this)
    is SyntaxTreeNode.Expression.LiteralExpr.FunctionCall -> visitor.visit(this)
    is SyntaxTreeNode.Expression.LiteralExpr.DotChainLiteral -> visitor.visit(this)
    else -> throw NotImplementedError("Hit else when accepting an ASTNode.")
}
