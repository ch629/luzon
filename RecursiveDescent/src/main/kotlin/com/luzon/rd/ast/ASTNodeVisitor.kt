package com.luzon.rd.ast

interface ASTNodeVisitor {
    fun visit(node: ASTNode.Class)
    fun visit(node: ASTNode.Constructor)
    fun visit(node: ASTNode.ConstructorVariableDeclaration)
    fun visit(node: ASTNode.FunctionDefinition)
    fun visit(node: ASTNode.FunctionParameter)
    fun visit(node: ASTNode.ForLoop)
    fun visit(node: ASTNode.WhileLoop)
    fun visit(node: ASTNode.IfStatement)
    fun visit(node: ASTNode.ElseStatements.ElseIfStatement)
    fun visit(node: ASTNode.ElseStatements.ElseStatement)
    fun visit(node: ASTNode.VariableDeclaration)
    fun visit(node: ASTNode.VariableAssign)
    fun visit(node: ASTNode.OperatorVariableAssign)
    fun visit(node: ASTNode.Block)
    fun visit(node: ASTNode.Expression.Binary.Plus)
    fun visit(node: ASTNode.Expression.Binary.Sub)
    fun visit(node: ASTNode.Expression.Binary.Mult)
    fun visit(node: ASTNode.Expression.Binary.Div)
    fun visit(node: ASTNode.Expression.Binary.Equals)
    fun visit(node: ASTNode.Expression.Binary.NotEquals)
    fun visit(node: ASTNode.Expression.Binary.GreaterEquals)
    fun visit(node: ASTNode.Expression.Binary.Greater)
    fun visit(node: ASTNode.Expression.Binary.Less)
    fun visit(node: ASTNode.Expression.Binary.LessEquals)
    fun visit(node: ASTNode.Expression.Binary.And)
    fun visit(node: ASTNode.Expression.Binary.Or)
    fun visit(node: ASTNode.Expression.Unary.Sub)
    fun visit(node: ASTNode.Expression.Unary.Not)
    fun visit(node: ASTNode.Expression.Unary.Increment)
    fun visit(node: ASTNode.Expression.Unary.Decrement)
    fun visit(node: ASTNode.Expression.LiteralExpr.IntLiteral)
    fun visit(node: ASTNode.Expression.LiteralExpr.FloatLiteral)
    fun visit(node: ASTNode.Expression.LiteralExpr.DoubleLiteral)
    fun visit(node: ASTNode.Expression.LiteralExpr.IdentifierLiteral)
    fun visit(node: ASTNode.Expression.LiteralExpr.FunctionCall)
}

fun ASTNode.accept(visitor: ASTNodeVisitor) {
    when (this) {
        is ASTNode.Class -> visitor.visit(this)
        is ASTNode.Constructor -> visitor.visit(this)
        is ASTNode.ConstructorVariableDeclaration -> visitor.visit(this)
        is ASTNode.FunctionDefinition -> visitor.visit(this)
        is ASTNode.FunctionParameter -> visitor.visit(this)
        is ASTNode.ForLoop -> visitor.visit(this)
        is ASTNode.WhileLoop -> visitor.visit(this)
        is ASTNode.IfStatement -> visitor.visit(this)
        is ASTNode.ElseStatements.ElseIfStatement -> visitor.visit(this)
        is ASTNode.ElseStatements.ElseStatement -> visitor.visit(this)
        is ASTNode.VariableDeclaration -> visitor.visit(this)
        is ASTNode.VariableAssign -> visitor.visit(this)
        is ASTNode.OperatorVariableAssign -> visitor.visit(this)
        is ASTNode.Block -> visitor.visit(this)
        is ASTNode.Expression.Binary.Plus -> visitor.visit(this)
        is ASTNode.Expression.Binary.Sub -> visitor.visit(this)
        is ASTNode.Expression.Binary.Mult -> visitor.visit(this)
        is ASTNode.Expression.Binary.Div -> visitor.visit(this)
        is ASTNode.Expression.Binary.Equals -> visitor.visit(this)
        is ASTNode.Expression.Binary.NotEquals -> visitor.visit(this)
        is ASTNode.Expression.Binary.GreaterEquals -> visitor.visit(this)
        is ASTNode.Expression.Binary.Greater -> visitor.visit(this)
        is ASTNode.Expression.Binary.Less -> visitor.visit(this)
        is ASTNode.Expression.Binary.LessEquals -> visitor.visit(this)
        is ASTNode.Expression.Binary.And -> visitor.visit(this)
        is ASTNode.Expression.Binary.Or -> visitor.visit(this)
        is ASTNode.Expression.Unary.Sub -> visitor.visit(this)
        is ASTNode.Expression.Unary.Not -> visitor.visit(this)
        is ASTNode.Expression.Unary.Increment -> visitor.visit(this)
        is ASTNode.Expression.Unary.Decrement -> visitor.visit(this)
        is ASTNode.Expression.LiteralExpr.IntLiteral -> visitor.visit(this)
        is ASTNode.Expression.LiteralExpr.FloatLiteral -> visitor.visit(this)
        is ASTNode.Expression.LiteralExpr.DoubleLiteral -> visitor.visit(this)
        is ASTNode.Expression.LiteralExpr.IdentifierLiteral -> visitor.visit(this)
        is ASTNode.Expression.LiteralExpr.FunctionCall -> visitor.visit(this)
    }
}